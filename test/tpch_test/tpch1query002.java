/*
        The following code is automatically generated by YSmart 12.01.
        Author: Rubao Lee, Yuan Yuan    
        Email: yuanyu@cse.ohio-state.edu
*/

package edu.osu.cse.ysmart.tpch1query;
import java.io.IOException;
import java.util.*;
import java.text.*;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.FileSplit;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.MultipleOutputs;
import org.apache.hadoop.mapreduce.lib.partition.*;


public class tpch1query002 extends Configured implements Tool{

	public static class Map extends Mapper<Object, Text,Text,Text>{

		Hashtable<String,Double>[] adv_gb_output=new Hashtable[8];
		Hashtable<String,Integer> adv_count_output=new Hashtable<String,Integer>();
		public void setup(Context context) throws IOException, InterruptedException {

			for(int i =0;i<8;i++){
				adv_gb_output[i] = new Hashtable<String,Double>();
			}
		}

		public void cleanup(Context context) throws IOException, InterruptedException {

			for(String tmp_key:adv_count_output.keySet()){
				Double count = (double) adv_count_output.get(tmp_key);
				Double tmp_0 = adv_gb_output[0].get(tmp_key);
				Double tmp_1 = adv_gb_output[1].get(tmp_key);
				Double tmp_2 = adv_gb_output[2].get(tmp_key);
				Double tmp_3 = adv_gb_output[3].get(tmp_key);
				Double avg_4 = adv_gb_output[4].get(tmp_key);
				Double avg_5 = adv_gb_output[5].get(tmp_key);
				Double avg_6 = adv_gb_output[6].get(tmp_key);
				adv_gb_output[7].put(tmp_key.toString(),count);
				context.write(new Text(tmp_key.toString()),new Text(tmp_0 + "&"+"|"+tmp_1 + "&"+"|"+tmp_2 + "&"+"|"+tmp_3 + "&"+"|"+avg_4 + "&"+count+"|"+avg_5 + "&"+count+"|"+avg_6 + "&"+count+"|"+count + "&"+"|"));
			}
		}
		public void map(Object key, Text value, Context context) throws IOException,InterruptedException{

			String line = value.toString();
			String[] line_buf = new String[11];
			int prev=0,i=0,n=0;
			for(i=0,n=0,prev=0;i<line.length();i++){

				if (line.charAt(i) == '|'){
					line_buf[n] = line.substring(prev,i);
					n = n+1;
					prev = i+1;
				}
				if(n == 11)
					break;
			}

			if(n<11)
				line_buf[n] = line.substring(prev,i);
			String hash_key = line_buf[8]+ "|" +line_buf[9]+ "|" ;
			if(line_buf[10].compareTo("1998-09-04") <= 0){

			if(adv_count_output.containsKey(hash_key)){
				Integer count = adv_count_output.get(hash_key)+1;
				adv_count_output.put(hash_key,count);
			}else{
				adv_count_output.put(hash_key,1);
			}
			if(adv_gb_output[0].containsKey(hash_key)){
				Double sum_tmp = (double)Double.parseDouble(line_buf[4]);
				sum_tmp += adv_gb_output[0].get(hash_key);
				adv_gb_output[0].put(hash_key, sum_tmp);
			}else{
				adv_gb_output[0].put(hash_key,(double)Double.parseDouble(line_buf[4]));
			}
			if(adv_gb_output[1].containsKey(hash_key)){
				Double sum_tmp = (double)Double.parseDouble(line_buf[5]);
				sum_tmp += adv_gb_output[1].get(hash_key);
				adv_gb_output[1].put(hash_key, sum_tmp);
			}else{
				adv_gb_output[1].put(hash_key,(double)Double.parseDouble(line_buf[5]));
			}
			if(adv_gb_output[2].containsKey(hash_key)){
				Double sum_tmp = (double)((Double.parseDouble(line_buf[5]) * (1 - Double.parseDouble(line_buf[6]))));
				sum_tmp += adv_gb_output[2].get(hash_key);
				adv_gb_output[2].put(hash_key, sum_tmp);
			}else{
				adv_gb_output[2].put(hash_key,(double)((Double.parseDouble(line_buf[5]) * (1 - Double.parseDouble(line_buf[6])))));
			}
			if(adv_gb_output[3].containsKey(hash_key)){
				Double sum_tmp = (double)(((Double.parseDouble(line_buf[5]) * (1 - Double.parseDouble(line_buf[6]))) * (1 + Double.parseDouble(line_buf[7]))));
				sum_tmp += adv_gb_output[3].get(hash_key);
				adv_gb_output[3].put(hash_key, sum_tmp);
			}else{
				adv_gb_output[3].put(hash_key,(double)(((Double.parseDouble(line_buf[5]) * (1 - Double.parseDouble(line_buf[6]))) * (1 + Double.parseDouble(line_buf[7])))));
			}
			if(adv_gb_output[4].containsKey(hash_key)){
				Double sum_tmp = (double)Double.parseDouble(line_buf[4]);
				sum_tmp += adv_gb_output[4].get(hash_key);
				adv_gb_output[4].put(hash_key, sum_tmp);
			}else{
				adv_gb_output[4].put(hash_key,(double)Double.parseDouble(line_buf[4]));
			}
			if(adv_gb_output[5].containsKey(hash_key)){
				Double sum_tmp = (double)Double.parseDouble(line_buf[5]);
				sum_tmp += adv_gb_output[5].get(hash_key);
				adv_gb_output[5].put(hash_key, sum_tmp);
			}else{
				adv_gb_output[5].put(hash_key,(double)Double.parseDouble(line_buf[5]));
			}
			if(adv_gb_output[6].containsKey(hash_key)){
				Double sum_tmp = (double)Double.parseDouble(line_buf[6]);
				sum_tmp += adv_gb_output[6].get(hash_key);
				adv_gb_output[6].put(hash_key, sum_tmp);
			}else{
				adv_gb_output[6].put(hash_key,(double)Double.parseDouble(line_buf[6]));
			}
			}

		}

	}

	public static class Reduce extends Reducer<Text,Text,NullWritable,Text>{

		public void reduce(Text key, Iterable<Text> v, Context context) throws IOException,InterruptedException{

			Iterator values = v.iterator();
			Double[] result = new Double[8];
			ArrayList[] d_count_buf = new ArrayList[8];
			String tmp = "";
			for(int i=0;i<8;i++){

				result[i] = 0.0;
				d_count_buf[i] = new ArrayList();
			}

			int[] al_line = new int[8];
			for(int i=0;i<8;i++){
				al_line[7] = 0;
			}
			int tmp_count = 0;
			while(values.hasNext()){

				String[] tmp_buf = values.next().toString().split("\\|");
				tmp = key.toString();
				String[] agg_tmp;
				agg_tmp = tmp_buf[0].split("&");
				result[0] += Double.parseDouble(agg_tmp[0]);
				agg_tmp = tmp_buf[1].split("&");
				result[1] += Double.parseDouble(agg_tmp[0]);
				agg_tmp = tmp_buf[2].split("&");
				result[2] += Double.parseDouble(agg_tmp[0]);
				agg_tmp = tmp_buf[3].split("&");
				result[3] += Double.parseDouble(agg_tmp[0]);
				agg_tmp = tmp_buf[4].split("&");
				result[4] += Double.parseDouble(agg_tmp[0]);
				al_line[4]+= Double.parseDouble(agg_tmp[1]);
				agg_tmp = tmp_buf[5].split("&");
				result[5] += Double.parseDouble(agg_tmp[0]);
				al_line[5]+= Double.parseDouble(agg_tmp[1]);
				agg_tmp = tmp_buf[6].split("&");
				result[6] += Double.parseDouble(agg_tmp[0]);
				al_line[6]+= Double.parseDouble(agg_tmp[1]);
				agg_tmp = tmp_buf[7].split("&");
				al_line[7]+= Double.parseDouble(agg_tmp[0]);
				tmp_count++;
			}
			String[] line_buf = tmp.split("\\|");
			result[4] = result[4] /al_line[4];
			result[5] = result[5] /al_line[5];
			result[6] = result[6] /al_line[6];
			result[7] = (double)al_line[7];
			NullWritable key_op = NullWritable.get();
			context.write(key_op,new Text(line_buf[0] + "|"+line_buf[1] + "|"+line_buf[0] + "|"+line_buf[1] + "|"+(result[0]) + "|"+(result[1]) + "|"+(result[2]) + "|"+(result[3]) + "|"+(result[4]) + "|"+(result[5]) + "|"+(result[6]) + "|"+(result[7]) + "|"));
		}

	}

	public int run(String[] args) throws Exception{

		Configuration conf = new Configuration();
		Job job = new Job(conf,"tpch1query002");
		job.setJarByClass(tpch1query002.class);
		job.setMapOutputKeyClass(Text.class);
		job.setMapOutputValueClass(Text.class);
		job.setOutputKeyClass(NullWritable.class);
		job.setOutputValueClass(Text.class);
		job.setMapperClass(Map.class);
		job.setReducerClass(Reduce.class);
		FileInputFormat.addInputPath(job, new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[1]));
		return (job.waitForCompletion(true) ? 0 : 1);
	}

	public static void main(String[] args) throws Exception {

			int res = ToolRunner.run(new Configuration(), new tpch1query002(), args);
			System.exit(res);
	}

}

