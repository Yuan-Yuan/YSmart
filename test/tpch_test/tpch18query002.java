/*
        The following code is automatically generated by YSmart 12.01.
        Author: Rubao Lee, Yuan Yuan    
        Email: yuanyu@cse.ohio-state.edu
*/

package edu.osu.cse.ysmart.tpch18query;
import java.io.IOException;
import java.util.*;
import java.text.*;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.FileSplit;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.MultipleOutputs;
import org.apache.hadoop.mapreduce.lib.partition.*;


public class tpch18query002 extends Configured implements Tool{

	public static class Map extends  Mapper<Object, Text,IntWritable,Text>{

		private String filename;
		private int filetag = -1;
		public void setup(Context context) throws IOException, InterruptedException {

			int last_index = -1, start_index = -1;
			String path = ((FileSplit)context.getInputSplit()).getPath().toString();
			last_index = path.lastIndexOf('/');
			last_index = last_index - 1;
			start_index = path.lastIndexOf('/',last_index);
			filename = path.substring(start_index+1,last_index+1);
			if(filename.compareTo("CUSTOMER")==0){
				filetag = 1;
			}
			if(filename.compareTo("tpch18query003")==0){
				filetag = 2;
			}
		}

		public void map(Object key, Text value,Context context) throws IOException,InterruptedException{

			String line = value.toString();
			String[] line_buf= line.split("\\|");
			BitSet dispatch = new BitSet(32);
			if(filetag ==1){

				context.write(new IntWritable(Integer.parseInt(line_buf[0])),new Text(1+"||"+line_buf[1]+ "|" +Integer.parseInt(line_buf[0])+ "|" ));
			}

			if(filetag ==2){

				context.write(new IntWritable(Integer.parseInt(line_buf[0])),new Text(2+"||"+Integer.parseInt(line_buf[0])+ "|" +Integer.parseInt(line_buf[1])+ "|" +line_buf[2]+ "|" +Double.parseDouble(line_buf[3])+ "|" +Double.parseDouble(line_buf[4])+ "|" ));
			}

		}

	}

	public static class Reduce extends  Reducer<IntWritable,Text,NullWritable,Text>{

		public void reduce(IntWritable key, Iterable<Text> v, Context context) throws IOException,InterruptedException{

			Iterator values = v.iterator();
			ArrayList[] it_output = new ArrayList[1];
			for(int i=0;i<1;i++){
				it_output[i]=new ArrayList();
			}
			String tmp = "";
			ArrayList al_left_0= new ArrayList();
			ArrayList al_right_0= new ArrayList();
			while(values.hasNext()){
				String line = values.next().toString();
				String dispatch = line.split("\\|")[1];
				tmp = line.substring(2+dispatch.length()+1);
				String[] line_buf= tmp.split("\\|");
				if(line.charAt(0)=='2'&&(dispatch.length()==0 ||dispatch.indexOf("0")==-1))
					al_left_0.add(tmp);
				if(line.charAt(0)=='1'&&(dispatch.length()==0 ||dispatch.indexOf("0")==-1))
					al_right_0.add(tmp);
			}
			String[] line_buf = tmp.split("\\|");
			for(int i=0;i<al_left_0.size();i++){
				String[] left_buf_0=((String)al_left_0.get(i)).split("\\|");
				for(int j=0;j<al_right_0.size();j++){
					String[] right_buf_0=((String)al_right_0.get(j)).split("\\|");
					if(Integer.parseInt(right_buf_0[1]) == Integer.parseInt(left_buf_0[0])){
						it_output[0].add(right_buf_0[0]+ "|" +Integer.parseInt(right_buf_0[1])+ "|" +Integer.parseInt(left_buf_0[1])+ "|" +left_buf_0[2]+ "|" +Double.parseDouble(left_buf_0[3])+ "|" +Double.parseDouble(left_buf_0[4])+ "|" );
					}
				}
			}
			ArrayList[] jfc_output = new ArrayList[1];
			for(int i=0;i<1;i++){
				jfc_output[i]=new ArrayList();
			}
			Hashtable<String,Double>[] jfc_gb_output_0=new Hashtable[1];
			Hashtable<String,ArrayList>[] jfc_dc_output_0=new Hashtable[1];
			Hashtable<String,Integer>[] jfc_count_output_0=new Hashtable[1];
			for(int i=0;i<1;i++){
				jfc_gb_output_0[i]=new Hashtable<String,Double>();
				jfc_dc_output_0[i]=new Hashtable<String,ArrayList>();
				jfc_count_output_0[i]=new Hashtable<String,Integer>();
			}
			for(int i=0;i<it_output[0].size();i++){
				String[] tmp_buf = ((String)it_output[0].get(i)).split("\\|");
				if(jfc_gb_output_0[0].containsKey(tmp_buf[0]+"|"+tmp_buf[1]+"|"+tmp_buf[2]+"|"+tmp_buf[3]+"|"+tmp_buf[4]+"|")){
					Double sum_tmp = (double)Double.parseDouble(tmp_buf[5]);
					 sum_tmp += jfc_gb_output_0[0].get(tmp_buf[0]+"|"+tmp_buf[1]+"|"+tmp_buf[2]+"|"+tmp_buf[3]+"|"+tmp_buf[4]+"|");
					jfc_gb_output_0[0].put(tmp_buf[0]+"|"+tmp_buf[1]+"|"+tmp_buf[2]+"|"+tmp_buf[3]+"|"+tmp_buf[4]+"|", sum_tmp);
				}else{
					jfc_gb_output_0[0].put(tmp_buf[0]+"|"+tmp_buf[1]+"|"+tmp_buf[2]+"|"+tmp_buf[3]+"|"+tmp_buf[4]+"|",(double)Double.parseDouble(tmp_buf[5]));
				}
			}
			for(Object tmp_key:jfc_gb_output_0[0].keySet()){
				String[] tmp_buf =((String) it_output[0].get(0)).split("\\|");
				for(int i=0;i<it_output[0].size();i++){
					tmp_buf =((String) it_output[0].get(i)).split("\\|");
					if(((String)tmp_key).compareTo(tmp_buf[0]+"|"+tmp_buf[1]+"|"+tmp_buf[2]+"|"+tmp_buf[3]+"|"+tmp_buf[4]+"|")==0)
						break;
				}
				String tmp_result = "";
				String gb_key = (String)tmp_key;
				tmp_result = tmp_result.concat(tmp_buf[4]);
				tmp_result = tmp_result.concat("|");
				tmp_result = tmp_result.concat(tmp_buf[3]);
				tmp_result = tmp_result.concat("|");
				tmp_result = tmp_result.concat(tmp_buf[0]);
				tmp_result = tmp_result.concat("|");
				tmp_result = tmp_result.concat(tmp_buf[1]);
				tmp_result = tmp_result.concat("|");
				tmp_result = tmp_result.concat(tmp_buf[2]);
				tmp_result = tmp_result.concat("|");
				tmp_result = tmp_result.concat(tmp_buf[3]);
				tmp_result = tmp_result.concat("|");
				tmp_result = tmp_result.concat(tmp_buf[4]);
				tmp_result = tmp_result.concat("|");
				tmp_result = tmp_result.concat((jfc_gb_output_0[0].get(gb_key))+"");
				tmp_result = tmp_result.concat("|");
				jfc_output[0].add(tmp_result);
			}
			NullWritable key_op=NullWritable.get();
			for(int i=0;i<jfc_output[0].size();i++){
				String jfc_result = (String)jfc_output[0].get(i);
				context.write(key_op, new Text(jfc_result));
			}
		}

	}

	public int run(String[] args) throws Exception{

		Configuration conf = new Configuration();
		Job job = new Job(conf,"tpch18query002");
		job.setJarByClass(tpch18query002.class);
		job.setMapOutputKeyClass(IntWritable.class);
		job.setMapOutputValueClass(Text.class);
		job.setOutputKeyClass(NullWritable.class);
		job.setOutputValueClass(Text.class);
		job.setMapperClass(Map.class);
		job.setReducerClass(Reduce.class);
		FileInputFormat.addInputPath(job,new Path(args[0]));
		FileOutputFormat.setOutputPath(job, new Path(args[2]));
		FileInputFormat.addInputPath(job,new Path(args[1]));
		FileOutputFormat.setOutputPath(job, new Path(args[2]));
		return (job.waitForCompletion(true) ? 0 : 1);
	}

	public static void main(String[] args) throws Exception {

			int res = ToolRunner.run(new Configuration(), new tpch18query002(), args);
			System.exit(res);
	}

}

