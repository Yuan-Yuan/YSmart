/*
        The following code is automatically generated by YSmart 12.01.
        Author: Rubao Lee, Yuan Yuan    
        Email: yuanyu@cse.ohio-state.edu
*/

package edu.osu.cse.ysmart;
import java.io.IOException;
import java.util.*;
import java.text.*;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.FileSplit;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.MultipleOutputs;
import org.apache.hadoop.mapreduce.lib.partition.*;


public class q1_2001000 extends Configured implements Tool{

	public static class Map extends  Mapper<Object, Text,Text,Text>{

		private int left = 0;
		public void setup(Context context) throws IOException, InterruptedException {

			int last_index = -1, start_index = -1;
			String path = ((FileSplit)context.getInputSplit()).getPath().toString();
			last_index = path.lastIndexOf('/');
			last_index = last_index - 1;
			start_index = path.lastIndexOf('/',last_index);
			String f_name = path.substring(start_index+1,last_index+1);
			if(f_name.compareTo("LINEORDER") == 0 )
				left = 1;
		}
		public void map(Object key, Text value,Context context) throws IOException,InterruptedException{

			String line = value.toString();
			int prev=0,i=0,n=0;
			if(this.left == 1){

				String[] line_buf = new String[12];
				for(i=0,n=0,prev=0;i<line.length();i++){

					if (line.charAt(i) == '|'){
						line_buf[n] = line.substring(prev,i);
						n = n+1;
						prev = i+1;
					}
					if(n == 12)
						break;
				}

			if(n<12)
				line_buf[n] = line.substring(prev,i);
				if(Integer.parseInt(line_buf[11]) >= 4 && Integer.parseInt(line_buf[11]) <= 6 && Integer.parseInt(line_buf[8]) >= 26 && Integer.parseInt(line_buf[8]) <= 35){

					context.write(new Text(line_buf[5]+ "|" ), new Text("L"+"|"+Double.parseDouble(line_buf[9])+ "|" +Integer.parseInt(line_buf[11])+ "|" +line_buf[5]+ "|" ));
				}
			}else{

				String[] line_buf = new String[7];
				for(i=0,n=0,prev=0;i<line.length();i++){

					if (line.charAt(i) == '|'){
						line_buf[n] = line.substring(prev,i);
						n = n+1;
						prev = i+1;
					}
					if(n == 7)
						break;
				}

			if(n<7)
				line_buf[n] = line.substring(prev,i);
				if(line_buf[6].compareTo("199401") == 0){

					context.write(new Text(line_buf[0]+ "|" ), new Text("R"+"|" +line_buf[0]+ "|" ));
				}
			}

		}

	}

	public static class Reduce extends  Reducer<Text,Text,NullWritable,Text>{

		public void reduce(Text key, Iterable<Text> v, Context context) throws IOException,InterruptedException{

			Iterator values = v.iterator();
			ArrayList al_left = new ArrayList();
			ArrayList al_right = new ArrayList();
			while(values.hasNext()){

				String tmp = values.next().toString();
				if(tmp.charAt(0) == 'L'){

					al_left.add(tmp.substring(2));
				}else{

					al_right.add(tmp.substring(2));
				}

			}

			NullWritable key_op = NullWritable.get();
			for(int i=0;i<al_left.size();i++){

				String[] left_buf = ((String)al_left.get(i)).split("\\|");
				for(int j=0;j<al_right.size();j++){

					String[] right_buf = ((String)al_right.get(j)).split("\\|");
					context.write(key_op, new Text(1+ "|" +Double.parseDouble(left_buf[0])+ "|" +Integer.parseInt(left_buf[1])+ "|" ));
				}

			}

		}

	}

	public int run(String[] args) throws Exception{

		Configuration conf = new Configuration();
		Job job = new Job(conf,"q1_2001000");
		job.setJarByClass(q1_2001000.class);
		job.setMapOutputKeyClass(Text.class);
		job.setMapOutputValueClass(Text.class);
		job.setOutputKeyClass(NullWritable.class);
		job.setOutputValueClass(Text.class);
		job.setMapperClass(Map.class);
		job.setReducerClass(Reduce.class);
		FileInputFormat.addInputPath(job,new Path(args[0]));
		FileInputFormat.addInputPath(job,new Path(args[1]));
		FileOutputFormat.setOutputPath(job, new Path(args[2]));
		return (job.waitForCompletion(true) ? 0 : 1);
	}

	public static void main(String[] args) throws Exception {

			int res = ToolRunner.run(new Configuration(), new q1_2001000(), args);
			System.exit(res);
	}

}

